From 44bdfa417e88c1f7b340aea35f3580d92b31fa1d Mon Sep 17 00:00:00 2001
From: Vincent Bernat <vincent@bernat.im>
Date: Wed, 25 Jul 2018 08:12:40 +0200
Subject: [PATCH 1/2] Fake source IP address for advertisements

Some OS are picky with the source IP address used when receiving
neighbor advertisements. For example, OpenBSD will drop such an
advertisement if the source address is not part of its local subnet.

When sending a neighbor advertisement, spoof the source IPv6 address
to match the target address. This requires a recent kernel (4.15+)
since the socket needs the `IPV6_FREEBIND` option to be set. We cannot
use `IP_FREEBIND` because the socket is of type `SOCK_RAW`.

Fix #41
---
 src/iface.cc | 49 ++++++++++++++++++++++++++++++++++++++++++++-----
 src/iface.h  |  2 +-
 2 files changed, 45 insertions(+), 6 deletions(-)

diff --git a/src/iface.cc b/src/iface.cc
index 1639a679fc64..d422460756ab 100644
--- a/src/iface.cc
+++ b/src/iface.cc
@@ -174,6 +174,10 @@ ptr<iface> iface::open_pfd(const std::string& name)
     return ifa;
 }
 
+#ifndef IPV6_FREEBIND
+#define IPV6_FREEBIND 78
+#endif
+
 ptr<iface> iface::open_ifd(const std::string& name)
 {
     int fd;
@@ -204,6 +208,15 @@ ptr<iface> iface::open_ifd(const std::string& name)
         return ptr<iface>();
     }
 
+    // Enable to send with any address (needs Linux 4.15+)
+    int one = 1;
+
+    if (setsockopt(fd, SOL_IPV6, IPV6_FREEBIND,& one, sizeof(one)) < 0) {
+        close(fd);
+        logger::error() << "Failed to enable free bind";
+        return ptr<iface>();
+    }
+
     // Detect the link-layer address.
 
     memset(&ifr, 0, sizeof(ifr));
@@ -315,12 +328,16 @@ ssize_t iface::read(int fd, struct sockaddr* saddr, uint8_t* msg, size_t size)
     return len;
 }
 
-ssize_t iface::write(int fd, const address& daddr, const uint8_t* msg, size_t size)
+ssize_t iface::write(int fd, const address* saddr, const address& daddr, const uint8_t* msg, size_t size)
 {
     struct sockaddr_in6 daddr_tmp;
+    struct in6_pktinfo *pktinfo;
     struct msghdr mhdr;
     struct iovec iov;
 
+    socklen_t controllen = CMSG_SPACE(sizeof(struct in6_pktinfo));
+    uint8_t control[CMSG_SPACE(sizeof(struct in6_pktinfo))] = {};
+
     memset(&daddr_tmp, 0, sizeof(struct sockaddr_in6));
     daddr_tmp.sin6_family = AF_INET6;
     daddr_tmp.sin6_port   = htons(IPPROTO_ICMPV6); // Needed?
@@ -335,13 +352,35 @@ ssize_t iface::write(int fd, const address& daddr, const uint8_t* msg, size_t si
     mhdr.msg_iov =& iov;
     mhdr.msg_iovlen = 1;
 
-    logger::debug() << "iface::write() daddr=" << daddr.to_string() << ", len="
-                    << size;
+    if (saddr != NULL)
+    {
+        struct cmsghdr* cmsg;
+        mhdr.msg_control = control;
+        mhdr.msg_controllen = controllen;
+
+        cmsg = CMSG_FIRSTHDR(&mhdr);
+        cmsg->cmsg_level = IPPROTO_IPV6;
+        cmsg->cmsg_type = IPV6_PKTINFO;
+        cmsg->cmsg_len = CMSG_LEN(sizeof(struct in6_pktinfo));
+        pktinfo = (struct in6_pktinfo*)CMSG_DATA(cmsg);
+        pktinfo->ipi6_ifindex = 0;
+        memcpy(&pktinfo->ipi6_addr, &saddr->const_addr(), sizeof(struct in6_addr));
+    }
+
+    logger::debug() << "iface::write() ifa=" << name()
+                    << ", saddr=" << ((saddr != NULL)?saddr->to_string():"(none)")
+                    << ", daddr=" << daddr.to_string()
+                    << ", len=" << size;
 
     int len;
 
     if ((len = sendmsg(fd,& mhdr, 0)) < 0)
+    {
+        logger::error() << "iface::write() failed! error=" << logger::err() << ", ifa=" << name()
+                        << ", saddr=" << ((saddr != NULL)?saddr->to_string():"(none)")
+                        << ", daddr=" << daddr.to_string();
         return -1;
+    }
 
     return len;
 }
@@ -407,7 +446,7 @@ ssize_t iface::write_solicit(const address& taddr)
     logger::debug() << "iface::write_solicit() taddr=" << taddr.to_string()
                     << ", daddr=" << daddr.to_string();
 
-    return write(_ifd, daddr, (uint8_t* )buf, sizeof(struct nd_neighbor_solicit)
+    return write(_ifd, NULL, daddr, (uint8_t* )buf, sizeof(struct nd_neighbor_solicit)
                  + sizeof(struct nd_opt_hdr) + 6);
 }
 
@@ -437,7 +476,7 @@ ssize_t iface::write_advert(const address& daddr, const address& taddr, bool rou
     logger::debug() << "iface::write_advert() daddr=" << daddr.to_string()
                     << ", taddr=" << taddr.to_string();
 
-    return write(_ifd, daddr, (uint8_t* )buf, sizeof(struct nd_neighbor_advert) +
+    return write(_ifd, &taddr, daddr, (uint8_t* )buf, sizeof(struct nd_neighbor_advert) +
         sizeof(struct nd_opt_hdr) + 6);
 }
 
diff --git a/src/iface.h b/src/iface.h
index efdd1ac68387..58052a06b886 100644
--- a/src/iface.h
+++ b/src/iface.h
@@ -44,7 +44,7 @@ public:
 
     static ssize_t read(int fd, struct sockaddr* saddr, uint8_t* msg, size_t size);
 
-    static ssize_t write(int fd, const address& daddr, const uint8_t* msg, size_t size);
+    static ssize_t write(int fd, const address* saddr, const address& daddr, const uint8_t* msg, size_t size);
 
     // Writes a NB_NEIGHBOR_SOLICIT message to the _ifd socket.
     ssize_t write_solicit(const address& taddr);
-- 
2.19.0

